//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Extensions/PlayerInputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputSystem : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputSystem"",
    ""maps"": [
        {
            ""name"": ""Runner"",
            ""id"": ""0ab2207a-5773-434d-ae64-6705d8661ce4"",
            ""actions"": [
                {
                    ""name"": ""MouseDelta"",
                    ""type"": ""Value"",
                    ""id"": ""153b8e68-66b0-4eec-8450-3d96b1f1a9ac"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseLeftButton"",
                    ""type"": ""Button"",
                    ""id"": ""4f3aa45e-1961-43a3-a1a3-6e333ff95f7f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""67a478ba-0ca1-4630-a67c-d1410a09986e"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDelta"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""0cc5ca86-b975-49c0-bbaa-9253aca972d9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""f1588b7d-629c-4cfe-a2d3-3b39278b40cb"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a8f803ff-fa7b-41c1-a0fc-b445f7083e47"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLeftButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Idle"",
            ""id"": ""f9c00403-475a-4fc7-8b80-f89f0211c837"",
            ""actions"": [
                {
                    ""name"": ""JoyStick"",
                    ""type"": ""Value"",
                    ""id"": ""7221f6e3-3115-403b-b632-484589a96b16"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fac25471-b1e9-4ca8-8d09-d2b52218086c"",
                    ""path"": ""<AndroidJoystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JoyStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Runner
        m_Runner = asset.FindActionMap("Runner", throwIfNotFound: true);
        m_Runner_MouseDelta = m_Runner.FindAction("MouseDelta", throwIfNotFound: true);
        m_Runner_MouseLeftButton = m_Runner.FindAction("MouseLeftButton", throwIfNotFound: true);
        // Idle
        m_Idle = asset.FindActionMap("Idle", throwIfNotFound: true);
        m_Idle_JoyStick = m_Idle.FindAction("JoyStick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Runner
    private readonly InputActionMap m_Runner;
    private IRunnerActions m_RunnerActionsCallbackInterface;
    private readonly InputAction m_Runner_MouseDelta;
    private readonly InputAction m_Runner_MouseLeftButton;
    public struct RunnerActions
    {
        private @PlayerInputSystem m_Wrapper;
        public RunnerActions(@PlayerInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseDelta => m_Wrapper.m_Runner_MouseDelta;
        public InputAction @MouseLeftButton => m_Wrapper.m_Runner_MouseLeftButton;
        public InputActionMap Get() { return m_Wrapper.m_Runner; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RunnerActions set) { return set.Get(); }
        public void SetCallbacks(IRunnerActions instance)
        {
            if (m_Wrapper.m_RunnerActionsCallbackInterface != null)
            {
                @MouseDelta.started -= m_Wrapper.m_RunnerActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.performed -= m_Wrapper.m_RunnerActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.canceled -= m_Wrapper.m_RunnerActionsCallbackInterface.OnMouseDelta;
                @MouseLeftButton.started -= m_Wrapper.m_RunnerActionsCallbackInterface.OnMouseLeftButton;
                @MouseLeftButton.performed -= m_Wrapper.m_RunnerActionsCallbackInterface.OnMouseLeftButton;
                @MouseLeftButton.canceled -= m_Wrapper.m_RunnerActionsCallbackInterface.OnMouseLeftButton;
            }
            m_Wrapper.m_RunnerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseDelta.started += instance.OnMouseDelta;
                @MouseDelta.performed += instance.OnMouseDelta;
                @MouseDelta.canceled += instance.OnMouseDelta;
                @MouseLeftButton.started += instance.OnMouseLeftButton;
                @MouseLeftButton.performed += instance.OnMouseLeftButton;
                @MouseLeftButton.canceled += instance.OnMouseLeftButton;
            }
        }
    }
    public RunnerActions @Runner => new RunnerActions(this);

    // Idle
    private readonly InputActionMap m_Idle;
    private IIdleActions m_IdleActionsCallbackInterface;
    private readonly InputAction m_Idle_JoyStick;
    public struct IdleActions
    {
        private @PlayerInputSystem m_Wrapper;
        public IdleActions(@PlayerInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @JoyStick => m_Wrapper.m_Idle_JoyStick;
        public InputActionMap Get() { return m_Wrapper.m_Idle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(IdleActions set) { return set.Get(); }
        public void SetCallbacks(IIdleActions instance)
        {
            if (m_Wrapper.m_IdleActionsCallbackInterface != null)
            {
                @JoyStick.started -= m_Wrapper.m_IdleActionsCallbackInterface.OnJoyStick;
                @JoyStick.performed -= m_Wrapper.m_IdleActionsCallbackInterface.OnJoyStick;
                @JoyStick.canceled -= m_Wrapper.m_IdleActionsCallbackInterface.OnJoyStick;
            }
            m_Wrapper.m_IdleActionsCallbackInterface = instance;
            if (instance != null)
            {
                @JoyStick.started += instance.OnJoyStick;
                @JoyStick.performed += instance.OnJoyStick;
                @JoyStick.canceled += instance.OnJoyStick;
            }
        }
    }
    public IdleActions @Idle => new IdleActions(this);
    public interface IRunnerActions
    {
        void OnMouseDelta(InputAction.CallbackContext context);
        void OnMouseLeftButton(InputAction.CallbackContext context);
    }
    public interface IIdleActions
    {
        void OnJoyStick(InputAction.CallbackContext context);
    }
}
